% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/score_tail_prob.R
\name{surprisal_prob}
\alias{surprisal_prob}
\title{Surprisal probabilities}
\usage{
surprisal_prob(
  g,
  distribution = NULL,
  GPD = FALSE,
  smallest_prob = 1e-06,
  gridsize = 100001,
  threshold_probability = 0.9
)
}
\arguments{
\item{g}{vector of surprisals.}

\item{distribution}{A distributional object specifying the probability
distribution to use.}

\item{GPD}{Logical value specifying if a Generalized Pareto distribution
should be used to estimate the tail probabilities.}

\item{smallest_prob}{Smallest detectable tail probability to be used
if empirical tail proportions are used. If the surprisal has lower probability
than this, \code{smallest_prob} is returned.}

\item{gridsize}{Size of grid used in estimating the empirical tail
probabilities. A larger number gives more accurate estimates but takes
more time.}

\item{threshold_probability}{Probability threshold when computing the GPD
distribution for the surprisals.}
}
\description{
Compute the probability of a surprisal at least as extreme as \code{g}.
A surprisal is given by \eqn{g = -\log(f)}
where \eqn{f} is the density or probability mass function of the
distribution.
These probabilities may be computed in three different ways.
\enumerate{
\item Given a specified \code{distribution}.
\item Using a Generalized Pareto Distribution fitted to the most extreme
values of \code{g} (those above the \code{threshold_probability} quantile). This
option is used if \code{GPD = TRUE}. For \code{g} values with tail probability
greater than \code{threshold_probability}, the value of \code{threshold_probability}
is returned.
\item Empirically as the proportion of values above \code{g}. This option is
used when \code{GPD = FALSE} and \code{distribution = NULL}.
}
}
\examples{
surprisal_prob(-dnorm(1:3, log = TRUE), dist_normal())
tibble(
  y = n01$v1,
  g = -dnorm(y, log = TRUE),
  prob1 = surprisal_prob(g, dist_normal()),
  prob2 = surprisal_prob(g, GPD = TRUE),
  prob3 = surprisal_prob(g)
) |>
  filter(prob1 < 0.01 | prob2 < 0.01 | prob3 < 0.01)
}
